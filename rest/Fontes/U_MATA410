#INCLUDE "TOTVS.CH"
#INCLUDE "RESTFUL.CH"
†
WSRESTFUL U_MATA410 DESCRIPTION "Exemplo de serviÁo REST"
†
WSDATA count††††† AS INTEGER
WSDATA startIndex AS INTEGER
†
WSMETHOD GET DESCRIPTION "Exemplo de retorno de entidade(s)" WSSYNTAX "/U_MATA410 || /U_MATA410/{id}"
WSMETHOD POST DESCRIPTION "Exemplo de inclusao de entidade" WSSYNTAX "/U_MATA410/{id}"
WSMETHOD PUT DESCRIPTION "Exemplo de alteraÁ„o de entidade" WSSYNTAX "/U_MATA410/{id}"
WSMETHOD DELETE DESCRIPTION "Exemplo de exclus„o de entidade" WSSYNTAX "/U_MATA410/{id}"
†
END WSRESTFUL
†
// O metodo GET nao precisa necessariamente receber parametros de querystring, por exemplo:
// WSMETHOD GET WSSERVICE U_MATA410†

WSMETHOD GET WSRECEIVE startIndex, count WSSERVICE U_MATA410
Local i
Local cRet:=""

conout('Chegou >> rest >> U_MATA410')†
// define o tipo de retorno do mÈtodo
::SetContentType("application/json")
†
// verifica se recebeu parametro pela URL
// exemplo: http://localhost:8080/U_MATA410/1

DEFAULT ::startIndex := 1, ::count := 5
::SetResponse('[')
If Len(::aURLParms) > 0
	SX3->(DbSetOrder(1))
	SA1->(DbSetOrder(1))
	conout('id>>'+::aURLParms[1])†
	If SA1->(DbSeek(xFilial('SA1')+::aURLParms[1]))
		SX3->(DbGoTop())
		SX3->(DbSeek('SA1'))
		While SX3->(!EOF()) .And. SX3->X3_ARQUIVO=="SA1"
		IF SX3->X3_CONTEXT=="R"
			if(::startIndex==i,::SetResponse('{'),::SetResponse(','))
	†† 		If SX3->X3_TIPO=="N"
				CONOUT("N>>" + Alltrim(Str(SA1->(&(SX3->X3_CAMPO)))))
				::SetResponse('"'+X3Titulo()+'":"' + Alltrim(Str(SA1->(&(SX3->X3_CAMPO)))) + '"')
			Else
			
				CONOUT("C>" + valtype(SA1->&(SX3->X3_CAMPO)) + ">"+SX3->X3_CAMPO+">"+SA1->&(SX3->X3_CAMPO))
				::SetResponse('"'+X3Titulo()+'":"' + SA1->&(SX3->X3_CAMPO) + '"')
			EndIf
		EndIF
		SX3->(DbSkip())
		EndDo
		::SetResponse(',')
†	Else
		::SetResponse('{"id":"invalido"}')
	EndIf
Else

	i:=::startIndex
	SA1->(DbSetOrder(1))
	SA1->(DbGoTop())
	While SA1->(!EOF())
		conout('PRODUTO>> '+SA1->(A1_COD+' - '+A1_NOME))
		//cRet+=if(empty(cRet),"",",")
		if(::startIndex==i,"",::SetResponse(','))
		//cRet+="{cod:'"+SA1->A1_COD+"',loja:'"+SA1->A1_LOJA+"',nome:'"+SA1->A1_NOME+"',nmreduz:'"+SA1->A1_NREDUZ+"',id:'"+alltrim(str(SA1->(RECNO())))+"'}"
		::SetResponse('{"cod":"'+SA1->A1_COD+'","loja":"'+SA1->A1_LOJA+'","nome":"'+SA1->A1_NOME+'","nmreduz":"'+SA1->A1_NREDUZ+'","id":"'+alltrim(str(SA1->(RECNO())))+'"}')
		i++
		SA1->(DbSkip())
	EndDo

†† ::SetResponse(']')
EndIf
Return .T.
†
// O metodo POST pode receber parametros por querystring, por exemplo:
// WSMETHOD POST WSRECEIVE startIndex, count WSSERVICE U_MATA410
WSMETHOD POST WSSERVICE U_MATA410
Local lPost := .T.
Local cBody
// Exemplo de retorno de erro
If Len(::aURLParms) == 0
†SetRestFault(400, "id parameter is mandatory")
†lPost := .F.
Else
†// recupera o body da requisiÁ„o
†cBody := ::GetContent()
conout('cBody>> '+cBody)
†// insira aqui o cÛdigo para operaÁ„o inserÁ„o
†// exemplo de retorno de um objeto JSON
†::SetResponse('{"id":' + ::aURLParms[1] + ', "name":"U_MATA410"}')
EndIf
Return lPost
†
// O metodo PUT pode receber parametros por querystring, por exemplo:
// WSMETHOD PUT WSRECEIVE startIndex, count WSSERVICE U_MATA410
WSMETHOD PUT WSSERVICE U_MATA410
Local lPut := .T.
†
// Exemplo de retorno de erro
If Len(::aURLParms) == 0
†† SetRestFault(400, "id parameter is mandatory")
†† lPut := .F.
Else
†† // recupera o body da requisiÁ„o
†† cBody := ::GetContent()
†† // insira aqui o cÛdigo para operaÁ„o de atualizaÁ„o
†† // exemplo de retorno de um objeto JSON
†† ::SetResponse('{"id":' + ::aURLParms[1] + ', "name":"U_MATA410"}')
EndIf
Return lPut
†
// O metodo DELETE pode receber parametros por querystring, por exemplo:
// WSMETHOD DELETE WSRECEIVE startIndex, count WSSERVICE U_MATA410
WSMETHOD DELETE WSSERVICE U_MATA410
Local lDelete := .T.
†
// Exemplo de retorno de erro
If Len(::aURLParms) == 0
†† SetRestFault(400, "id parameter is mandatory")
†† lDelete := .F.
†
Else
†† // insira aqui o cÛdigo para operaÁ„o exclus„o
†† // exemplo de retorno de um objeto JSON
†† ::SetResponse('{"id":' + ::aURLParms[1] + ', "name":"U_MATA410"}')
EndIf
Return lDelete

/*\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/*/
#INCLUDE "PROTHEUS.CH"#INCLUDE "TBICONN.CH"
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
⁄ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒ
ø±±±±≥FunáÑo    ≥MyMata410 ≥ Autor ≥ Eduardo Riera         ≥ Data ≥17.04.2003 ≥
±±±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒ
¥±±±±≥          ≥Rotina de teste da rotina automatica do programa MATA410     ≥
±±±±≥          ≥                                                             ≥
±±±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ
¥±±±±≥Parametros≥Nenhum                                                       ≥
±±±±≥          ≥                                                             ≥
±±±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
±±±±≥Retorno   ≥Nenhum                                                       ≥
±±±±≥          ≥                                                             ≥
±±±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
±±±±≥DescriáÑo ≥Esta rotina tem como objetivo efetuar testes na rotina de    ≥
±±±±≥          ≥pedido de venda                                              ≥
±±±±≥          ≥                                                             ≥
±±±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
±±±±≥Uso       ≥ Materiais                                                   ≥
±±±±¿ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ/*/

Function MyMata410()
Local aCabec := {}
Local aItens := {}
Local aLinha := {}
Local nX     := 0
Local nY     := 0
Local cDoc   := ""
Local lOk    := .T.

PRIVATE lMsErroAuto := .F.
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//| Abertura do ambiente                                         |
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
ConOut(Repl("-",80))
ConOut(PadC("Teste de Inclusao de 10 pedidos de venda  com 30 itens cada",80))
PREPARE ENVIRONMENT EMPRESA "99" FILIAL "01" MODULO "FAT" TABLES "SC5","SC6","SA1","SA2","SB1","SB2","SF4"
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//| Verificacao do ambiente para teste                           |
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
dbSelectArea("SB1")
dbSetOrder(1)
If !SB1->(MsSeek(xFilial("SB1")+"PA001"))	
lOk := .F.	
ConOut("Cadastrar produto: PA001")
EndIf
dbSelectArea("SF4")
dbSetOrder(1)
If !SF4->(MsSeek(xFilial("SF4")+"501"))	
lOk := .F.	
ConOut("Cadastrar TES: 501")
EndIf
dbSelectArea("SE4")
dbSetOrder(1)
If !SE4->(MsSeek(xFilial("SE4")+"001"))
	lOk := .F.	
	ConOut("Cadastrar condicao de pagamento: 001")
EndIf
If !SB1->(MsSeek(xFilial("SB1")+"PA002"))	
lOk := .F.	ConOut("Cadastrar produto: PA002")
EndIf
dbSelectArea("SA1")
dbSetOrder(1)
If !SA1->(MsSeek(xFilial("SA1")+"CL000101"))
	lOk := .F.	
	ConOut("Cadastrar cliente: CL000101")
EndIf
If lOk	
ConOut("Inicio: "+Time())
	For nY := 1 To 10		
		cDoc := GetSxeNum("SC5","C5_NUM")		
		RollBAckSx8()		
		aCabec := {}		
		aItens := {}		
		aadd(aCabec,{"C5_NUM"   ,cDoc,Nil})		
		aadd(aCabec,{"C5_TIPO" ,"N",Nil})		
		aadd(aCabec,{"C5_CLIENTE",SA1->A1_COD,Nil})		
		aadd(aCabec,{"C5_LOJACLI",SA1->A1_LOJA,Nil})		
		aadd(aCabec,{"C5_LOJAENT",SA1->A1_LOJA,Nil})		
		aadd(aCabec,{"C5_CONDPAG",SE4->E4_CODIGO,Nil})		
		If cPaisLoc == "PTG"			
			aadd(aCabec,{"C5_DECLEXP","TESTE",Nil})		
		Endif		
		For nX := 1 To 30			
			aLinha := {}			
			aadd(aLinha,{"C6_ITEM",StrZero(nX,2),Nil})			
			aadd(aLinha,{"C6_PRODUTO",SB1->B1_COD,Nil})			
			aadd(aLinha,{"C6_QTDVEN",1,Nil})			
			aadd(aLinha,{"C6_PRCVEN",100,Nil})			
			aadd(aLinha,{"C6_PRUNIT",100,Nil})			
			aadd(aLinha,{"C6_VALOR",100,Nil})			
			aadd(aLinha,{"C6_TES","501",Nil})			
			aadd(aItens,aLinha)		
		Next nX		
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø		
//| Teste de Inclusao                                            |		
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ		

		MATA410(aCabec,aItens,3)		
		If !lMsErroAuto			
			ConOut("Incluido com sucesso! "+cDoc)		
		Else			
			ConOut("Erro na inclusao!")		
		EndIf	
	Next nY	ConOut("Fim  : "+Time())	
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø	
//| Teste de alteracao                                           |
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ	
	aCabec := {}	
	aItens := {}	
	aadd(aCabec,{"C5_NUM",cDoc,Nil})	
	aadd(aCabec,{"C5_TIPO","N",Nil})	
	aadd(aCabec,{"C5_CLIENTE",SA1->A1_COD,Nil})	
	aadd(aCabec,{"C5_LOJACLI",SA1->A1_LOJA,Nil})	
	aadd(aCabec,{"C5_LOJAENT",SA1->A1_LOJA,Nil})	
	aadd(aCabec,{"C5_CONDPAG",SE4->E4_CODIGO,Nil})	
	If cPaisLoc == "PTG"	
		aadd(aCabec,{"C5_DECLEXP","TESTE",Nil})	
	Endif	
	For nX := 1 To 30	
		aLinha := {}		
		aadd(aLinha,{"LINPOS","C6_ITEM",StrZero(nX,2)})		
		aadd(aLinha,{"AUTDELETA","N",Nil})		
		aadd(aLinha,{"C6_PRODUTO",SB1->B1_COD,Nil})		
		aadd(aLinha,{"C6_QTDVEN",2,Nil})		
		aadd(aLinha,{"C6_PRCVEN",100,Nil})		
		aadd(aLinha,{"C6_PRUNIT",100,Nil})		
		aadd(aLinha,{"C6_VALOR",200,Nil})		
		aadd(aLinha,{"C6_TES","501",Nil})		
		aadd(aItens,aLinha)	
	Next nX		
	ConOut(PadC("Teste de alteracao",80))	
	ConOut("Inicio: "+Time())	
	MATA410(aCabec,aItens,4)	
	ConOut("Fim  : "+Time())	
	ConOut(Repl("-",80))		
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø	
//| Teste de Exclusao                                            |	
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ	
ConOut(PadC("Teste de exclusao",80))	
ConOut("Inicio: "+Time())	
MATA410(aCabec,aItens,5)	
If !lMsErroAuto		
	ConOut("Exclusao com sucesso! "+cDoc)	
Else		
	ConOut("Erro na exclusao!")	
EndIf	
ConOut("Fim  : "+Time())	
ConOut(Repl("-",80))
EndIf
RESET ENVIRONMENT
Return(.T.)
Par‚metros:
